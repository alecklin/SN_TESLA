<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_tesla.TeslaMetricPusher</api_name>
        <client_callable>false</client_callable>
        <description>This class will handle pushing the data from the Tesla tables to the Metric database through the MID server</description>
        <name>TeslaMetricPusher</name>
        <script><![CDATA[/*
* Aleck.Lin@ServiceNow.com
* Description: Class to push out various metric data for Tesla vehicle
* Example of invoking this class

	var tmp = new TeslaMetricPusher();
	tmp.setVehicle("someVehicleId"); //optional if want to specify the specific vehicle
	tmp.setDebug(false);
	tmp.run();
*/

var TeslaMetricPusher = Class.create();
TeslaMetricPusher.prototype = {
    initialize: function() {		
		this.midName = null;	
		this.vehicleId = null;
		this.debugFlag = false;
    },
	
	_getMIDServer: function() {
		// Find any MID that is capabile of sending the metrics!		
		var msf = new global.MIDServerFinder();
		msf.setCapabilities(['ITOA Metrics']);
		var mids = msf.getMIDServers();
		if (mids.length != 0)
			this.midName = msf.getMIDServers()[0];				
	},
	
	setVehicle: function(vehicleId) {
		this.vehicleId = vehicleId;		
	},
	
	run: function() {		
		this._getMIDServer();
		
		// if there's no mid, no dice!
		if (this.midName == null) {
			gs.info("Unable to find a MID server to push metrics!");
			return;		
		}
		
		// Only do this for vehicles that have enabled tracking
		var gr = new GlideRecord("x_snc_tesla_tesla_preference");
		gr.addQuery("name", "enable_metric_tracking");
		
		// If a vehicle is already specified, then just use it
		if (!gs.nil(this.vehicleId))
			gr.addQuery("vehicle", this.vehicleId);
		
		gr.addActiveQuery("active");
		gr.addQuery("value", "true");
		gr.query();
		while (gr.next())
			this.pushMetrics(gr.vehicle+'');
		
	},
	
	/*
	*   Pushing the metrics defined for each vehicle
	*/
	pushMetrics: function(vehicleSysId) {			
		this.debug("Pushing vehicle: " + vehicleSysId);		
		
		this.pushVehicleStates(vehicleSysId);		
		this.pushDrivingAndPosition(vehicleSysId);
		this.pushChargingState(vehicleSysId);				
		this.pushClimateSettings(vehicleSysId);						
	},
	
	pushVehicleStates: function(vehicleSysId) {		
		var table = "x_snc_tesla_vehicle_state";
		var values = [];
		
		values.push({"label":"Odometer", "columnName":"odometer"});
		
		this._pushTableMetrics(table, values, vehicleSysId);		
	},			
	
	pushDrivingAndPosition: function(vehicleSysId) {
		var table = "x_snc_tesla_driving_and_position";
		var values = [];
		
		values.push({"label":"GPS Heading", "columnName":"heading"});
		values.push({"label":"GPS Longitude", "columnName":"longitude"});			
		values.push({"label":"Power", "columnName":"power"});			
		values.push({"label":"Speed", "columnName":"speed"});					
		
		this._pushTableMetrics(table, values, vehicleSysId);			
	},		
	
	pushChargingState: function(vehicleSysId) {
		var table = "x_snc_tesla_charging_state";
		var values = [];
		
		values.push({"label":"Charger Power", "columnName":"charger_power"});
		values.push({"label":"Charge Rate", "columnName":"charge_rate"});			
		values.push({"label":"Charger Voltage", "columnName":"charger_voltage"});			
		values.push({"label":"Charge Energy Added", "columnName":"charge_energy_added"});			
		values.push({"label":"Charge Miles Added Ideal", "columnName":"charge_miles_added_ideal"});			
		values.push({"label":"Charge Miles Added rated", "columnName":"charge_miles_added_rated"});	
		values.push({"label":"Battery Level", "columnName":"battery_level"});			
		values.push({"label":"Battery Usable Level", "columnName":"usable_battery_level"});			
		values.push({"label":"Battery Range", "columnName":"battery_range"});		
		values.push({"label":"Estimate Battery Range", "columnName":"est_battery_range"});			
		values.push({"label":"Ideal Battery Range", "columnName":"ideal_battery_range"});					
						
		this._pushTableMetrics(table, values, vehicleSysId);			
	},		
	
	pushClimateSettings: function(vehicleSysId) {
		var table = "x_snc_tesla_climate_setting";
		var values = [];
		
		values.push({"label":"Inside Temperature", "columnName":"inside_temp"});
		values.push({"label":"Outside Temperature", "columnName":"outside_temp"});			
		
		this._pushTableMetrics(table, values, vehicleSysId);		
	},		
	
	
	_pushTableMetrics: function(table, values, vehicleSysId) {
		this.debug("Pushing metrics for " + table);
		
		var gr = new GlideRecord(table);
		gr.addQuery("vehicle", vehicleSysId);		
		gr.query();
		if (!gr.next())
			return;
		
		var autoCI = gr.vehicle.automobile;
		if (autoCI === null || autoCI === undefined || autoCI ==='') { //Make sure the corresponding CI record exists
			this.debug("Unable to find the corresponding CI record");
			return;
		}
		
		var ciName = gr.vehicle.automobile.name+'';
		this.debug("The vehicle CIName is " + ciName);		
		
		for (var i=0; i<values.length; i++) {
			var value = values[i];
			var metricName = value.label;
			var columnName = value.columnName;
			
			var metricValue = this._getMetricValue(table, columnName, gr[columnName], vehicleSysId);	
			
			// if metric value is not a number, skip...
			if (metricValue === null || metricValue === undefined || isNaN(metricValue))
				continue;
			
			this.debug("Metric Name is " + metricName + " and value is " + metricValue);
			
			this.pushMetric(ciName, metricName, metricValue);						
		}			
	},
	
	_getMetricValue: function(table, columnName, cValue, vehicleSysId) {
		// Check to see if there's any special conditions that need to be calculated differently 				
		var value = cValue; 
				
		if (table == "x_snc_tesla_climate_setting") {
			if (columnName == "inside_temp") {
				value = new TeslaUtils().getTemperature(value, vehicleSysId);				
			} else if (columnName == "outside_temp") {
				var temp = value+'';
				if (temp == '' || isNaN(Number(temp))) //making sure it's actually a number
					return;
				var tValue = Number(temp);
				value = new TeslaUtils().getTemperature(tValue, vehicleSysId);								
			}
		} else {
			value = Number(value);
		} 
		
		
		return	value;	
	},
	
	pushMetric: function(ciName, metricName, metricValue) {				
		var p = new x_snc_sn_metric_se.GenericProbe(this.midName);
		p.setTopic("JavascriptProbe");
		p.setMIDServer(this.midName);
		p.setName("MetricProbe");
		p.setSource(ciName + " - " + metricName);
		p.addParameter("node", ciName);
		p.addParameter("metric_type", metricName);
		p.addParameter("metric_value", metricValue);
		p.addParameter("ci_type", "x_snc_tesla_automobile");
		p.addParameter("metric_source", "Tesla Metric");
		
		p.create();
			
	},
	
	debug: function(msg) {
		if (!this.debugFlag)
			return; 
		
		gs.info("TeslaMetricPusher: " + msg);		
	},
	
	
	setDebug: function(value) {
		this.debugFlag = value;	
	},
	

    type: 'TeslaMetricPusher'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>aleck.lin</sys_created_by>
        <sys_created_on>2018-02-15 06:54:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>13875da54f14d3808c81efd18110c797</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>TeslaMetricPusher</sys_name>
        <sys_package display_value="Tesla" source="x_snc_tesla">7441c3a64f5a4f002f9ae4928110c771</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Tesla">7441c3a64f5a4f002f9ae4928110c771</sys_scope>
        <sys_update_name>sys_script_include_13875da54f14d3808c81efd18110c797</sys_update_name>
        <sys_updated_by>aleck.lin</sys_updated_by>
        <sys_updated_on>2018-06-25 00:45:03</sys_updated_on>
    </sys_script_include>
</record_update>
